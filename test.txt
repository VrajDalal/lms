'use client'

import React, { useState, useEffect } from 'react';
import Image from 'next/image';
import DashBoard from '../dashboard/page';
import { toast } from 'sonner';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { format, parseISO, isValid, parse } from 'date-fns';
import { Calendar as CalendarIcon } from 'lucide-react';
import { cn } from '@/lib/utils';
import { Calendar } from '@/components/ui/calendar';
import { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';


interface IBookIssue {
    bookNo:string;
    bookIssueDate: Date;
    bookName: string;
    returnDate: Date;
}
interface IStudentBookIssueHistory {
    sid: number;
    enrollmentNo: string;
    studentRollNo: number;
    studentName: string;
    studentEmail: string;
    studentMobileNo: number;
    studentCource: string;
    studentYear: string;
    studentDiv: string;
    IssueDetails: IBookIssue[]
}

export default function History() {
    const [studentBookIssueHistory, setStudentBookIssueHistory] = useState<IStudentBookIssueHistory[]>([]);


    useEffect(() => {
        handleToGetStudentIssueBooks();
    }, []);

    const handleToGetStudentIssueBooks = async () => {
        try {
            const studentBookIssueHistoryResponse = await fetch('/api/admin/issueBookHistory', {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
                credentials: 'include',
            });

            const studentBookIssueHistoryResult = await studentBookIssueHistoryResponse.json();
            if (studentBookIssueHistoryResult.success) {
                const formattedData = studentBookIssueHistoryResult.datas.map((item: any) => ({
                    ...item,
                    IssueDetails: item.IssueDetails.map((issue: any) => ({
                        ...issue,
                        bookIssueDate: isValid(parse(issue.bookIssueDate, 'dd-MM-yyyy', new Date())) ? parse(issue.bookIssueDate, 'dd-MM-yyyy', new Date()) : null,
                        returnDate: isValid(parse(issue.returnDate, 'dd-MM-yyyy', new Date())) ? parse(issue.returnDate, 'dd-MM-yyyy', new Date()) : null,
                    }))
                }));
                setStudentBookIssueHistory(formattedData);
            } else {
                toast.error('No data found or an error occurred');
            }
        } catch (error) {
            console.error('Error fetching data:', error);
            toast.error('An error occurred while fetching the student issue book data');
        }
    };

    return (
        <>
            <title>History</title>
            <DashBoard />
            <div className='flex flex-col ml-64 p-4 h-screen'>
                <div className="text-5xl font-bold mt-4">
                    <h1>History</h1>
                </div>
                <br />
                <hr />
                <form className='m-10'>
                    {/* <Button type="button" onClick={handleToGetStudentIssueBooks}>Show</Button> */}
                    <h3 className="font-bold text-xl mb-2">Student Details</h3>
                    {studentBookIssueHistory && studentBookIssueHistory.length > 0 ? (
                        studentBookIssueHistory.map((history, historyIndex) => (
                            <div key={historyIndex} className='mb-6'>
                                <div className='space-y-2'>
                                    <label>SID</label>
                                    <Input value={history.sid} className='w-32' disabled />
                                    <label>Enrollment No</label>
                                    <Input value={history.enrollmentNo} disabled />
                                    <label>Student Roll No</label>
                                    <Input value={history.studentRollNo} disabled />
                                    <label>Student Name</label>
                                    <Input value={history.studentName} disabled />
                                    <label>Student Email</label>
                                    <Input value={history.studentEmail} disabled />
                                    <label>Student Mobile No</label>
                                    <Input value={history.studentMobileNo} disabled />
                                    <label>Student Course</label>
                                    <Input value={history.studentCource} disabled />
                                    <label>Student Year</label>
                                    <Input value={history.studentYear} disabled />
                                    <label>Student Division</label>
                                    <Input value={history.studentDiv} disabled />
                                </div>
                                {history.IssueDetails && history.IssueDetails.length > 0 && (
                                    <>
                                        <div className='mt-4'>
                                            {history.IssueDetails.map((bookIssue, bookIssueIndex) => (
                                                <div key={bookIssueIndex} className='border p-4 mb-4'>
                                                    <p>Book No: <strong>{bookIssue.bookNo}</strong></p>
                                                    
                                                    <p>Issue Date:
                                                        <Popover>
                                                            <PopoverTrigger asChild>
                                                                <Button
                                                                    variant={"outline"}
                                                                    className={cn(
                                                                        "w-[280px] justify-start text-left font-normal",
                                                                        !bookIssue.bookIssueDate && "text-muted-foreground"
                                                                    )}
                                                                >
                                                                    <CalendarIcon className="mr-2 h-4 w-4" />
                                                                    {bookIssue.bookIssueDate ? format(bookIssue.bookIssueDate, 'PPP') : <span>{bookIssue.bookIssueDate}</span>}
                                                                </Button>
                                                            </PopoverTrigger>
                                                            <PopoverContent className="w-auto p-0">
                                                                <Calendar
                                                                    mode="single"
                                                                    selected={bookIssue.bookIssueDate}
                                                                    onSelect={() => { }}
                                                                    initialFocus
                                                                    disabled
                                                                />
                                                            </PopoverContent>
                                                        </Popover>
                                                    </p>
                                                    <p>Book Name: <strong>{bookIssue.bookName}</strong></p>
                                                    <p>Return Date:
                                                        <Popover>
                                                            <PopoverTrigger asChild>
                                                                <Button
                                                                    variant={"outline"}
                                                                    className={cn(
                                                                        "w-[280px] justify-start text-left font-normal",
                                                                        !bookIssue.returnDate && "text-muted-foreground"
                                                                    )}
                                                                >
                                                                    <CalendarIcon className="mr-2 h-4 w-4" />
                                                                    {bookIssue.returnDate ? format(bookIssue.returnDate, 'PPP') : <span>{bookIssue.returnDate}</span>}
                                                                </Button>
                                                            </PopoverTrigger>
                                                            <PopoverContent className="w-auto p-0">
                                                                <Calendar
                                                                    mode="single"
                                                                    selected={bookIssue.returnDate}
                                                                    onSelect={() => { }}
                                                                    initialFocus
                                                                    disabled
                                                                />
                                                            </PopoverContent>
                                                        </Popover>
                                                    </p>
                                                </div>
                                            ))}
                                        </div>
                                    </>
                                )}
                            </div>
                        ))
                    ) : (
                        <div className='flex items-center justify-center bg-transparent'>
                            <Image alt='student book issue data not found' src='/no-data.png' width={300} height={300} />
                        </div>
                    )}
                </form>
            </div>
        </>
    );
}
